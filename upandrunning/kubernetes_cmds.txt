kubectl get version

kubectl get componentstatus

kubectl get nodes

kubectl describe nodes <node-name>

// Check kubernetes proxy
kubectl get daemonSets --namespace=kube-system kube-proxy

// Kubernetes DNS
kubectl get deployments --namespace=kube-system core-dns

// Service that performs load-balancing for the DNS server
kubectl get services --namespace=kube-system core-dns

// Kubernetes dashboard
kubectl get deployments --namespace=kube-system kubernetes-dashboard
kubectl get services --namespace=kube-system kubernetes-dashboard
kubectl proxy

// Interact with all namespaces
kubectl --all-namespace

// Sets default namespace instead of 'default', 
// Updates $HOME/.kube/config
kubectl config set-context my-context --namespace=mystuff
kubectl config use-context my-context

kubectl get <resource-name>

kubectl get <resource-name> <obj-name>

// Raw JSON or YAML
kubectl get <resource-name> -o json
						    -o yaml

// To manipulate kubectl output, for ex., for UNIX pipes
kubectl --no-headers

kubectl describe <resource-name> <obj-name>

// Objects in the Kubernetes API are represented as JSON or YAML files

// Create an object 'obj' in K8s
// Same command to update the object as well
kubectl apply -f obj.yaml

// If you want to see what the apply command will do without actually 
// making the changes, you can use the --dry-run flag to print the objects 
// to the terminal without actually sending them to the server

// Interactive edit instead of editing a local file
kubectl edit <resource-name> <obj-name>

// Check state of object
kubectl apply -f myobj.yaml view-last-applied
							set-last-applied
							edit-last-applied
// Delete an object
kubectl delete -f obj.yaml
kubectl delete <resource-name> <obj-name>

// Labels and annotations
// Create
kubectl label pods bar color=red
kubectl annotation pods bar color=red

--overwrite flag to overwrite an existing label

// Remove 
kubectl label pods bar color-

// Debugging commands
kubectl logs <pod-name>
kubectl logs <pod-name>	-c <container-id>
// -f flag to stream logs to terminal without exiting
// --previous flag to get logs from previous instance of container

// Execute a command on a running container
kubectl exec -it <pod-name> -- bash
				
kubectl attach -it <pod-name>

// Copy files to and from container
// Either direction works
kubectl cp <pod-name>:</path/to/remote/file> </path/to/local/file>

// Port forwarding
kubectl port-forward <pod-name> <local-machine-port>:<container-port>
kubectl port-forward <pod-name> 8080:80

// How cluster is using resources
kubectl top nodes
kubectl top pods

// Install bash-completion for auto-complete feature


// Pods, declarative configuration, pod manifest files

// etcd for persistent storage

// Create and delete pod
kubectl run kuard --generator=run-pod/v1 \
--image=gcr.io/kuar-demo/kuard-amd64:blue

kubectl get pods

kubectl delete pods/kuard

// Running Pod
kubectl apply -f kuard-pod.yaml

// kubelet daemon process on nodes

kubectl get pods

// Pod details
kubectl describe pods kuard

// Deleting a pod
kubectl delete pods/kuard

kubectl delete -f kuard-pod.yaml

// Health checks
// 1.Liveness probe
// 2.Readiness probe
// 3.tcpSocket health check for non-HTTP cases
// 4.exec probes


// Resource management (CPU, memory, GPU etc)
// Requests (minimum) and Limits (maximum)

// Resources are requested per container, not per Pod

// CPU requests are implemented using the cpu-shares functionality in the Linux kernel

// cpu: "500m" implies 0.5 cores, 1000m means 1 core

// Persistent volumes
// volumes and volumeMounts

// Different ways of using volumes with Pods
// Communication/synchronization, Cache, Persistent Data, Mounting the host file system

// Persisting data using remote disks such as network storage volume

// Protocols such as NFS and iSCSI as well cloud provider-based storage APIs




